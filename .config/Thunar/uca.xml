<?xml version='1.0' encoding='utf-8'?>
<actions>
<action>
	<icon>Terminal</icon>
	<name>Open Terminal Here</name>
	<command>exo-open --working-directory %f --launch TerminalEmulator</command>
	<description>Example for a custom action</description>
	<patterns>*</patterns>
	<directories/>
</action>
<action>
	<icon>filefind</icon>
	<name>Find in this folder</name>
	<command>catfish --path=%f</command>
	<description>Search for files within this folder</description>
	<patterns>*</patterns>
	<directories/>
</action>
<action>
	<icon>edit-delete</icon>
	<name>Shred and Delete File(s)</name>
	<command>if zenity --question;then shred -fuz %F;fi</command>
	<description>Shreds and deletes file(s). </description>
	<patterns>*</patterns>
	<audio-files/>
	<image-files/>
	<other-files/>
	<text-files/>
	<video-files/>
</action>
<action>
	<icon>folder-saved-search</icon>
	<name>Find in selected folder</name>
	<command>catfish --path=%f%d</command>
	<description>Search for files within the selected folder</description>
	<patterns>*</patterns>
	<directories/>
</action>
<action>
	<icon>emblem-symbolic-link</icon>
	<name>Create symlink</name>
	<command>ln -s %f %n.symlink</command>
	<description>Creating a symbolic link</description>
	<patterns>*</patterns>
	<directories/>
	<other-files/>
	<text-files/>
</action>
<action>
	<icon>soundconverter</icon>
	<name>Convert Audio</name>
	<command>/usr/bin/soundconverter %F</command>
	<description>Convert audio between formats</description>
	<patterns>*</patterns>
	<audio-files/>
</action>
<action>
	<icon>application-pdf</icon>
	<name xml:lang="de">zu einem PDF konvertieren</name>
	<name xml:lang="en">Convert to a single PDF</name>
	<name>Convert to a single PDF</name>
	<command>(set -e;export TEXTDOMAIN='thunar-custom-actions';export TEXTDOMAINDIR='/usr/share/locale';. /usr/bin/gettext.sh;        ORIENTATION="$(            (            echo $(eval_gettext 'Portrait');            echo $(eval_gettext 'Landscape');            ) | /usr/bin/zenity --list             --column="$(eval_gettext 'Orientation')"             --text="$(eval_gettext 'Choose an orientation for the PDF.')"             --title="$(eval_gettext 'PDF orientation')")";         if test $? -ne 0;then             exit;        fi;        A4_PORTRAIT_WIDTH=1654;        A4_PORTRAIT_HEIGHT=2338;        if test "$ORIENTATION" = "$(eval_gettext 'Portrait')";then             WIDTH=$A4_PORTRAIT_WIDTH;            HEIGHT=$A4_PORTRAIT_HEIGHT;        elif test "$ORIENTATION" = "$(eval_gettext 'Landscape')";then             WIDTH=$A4_PORTRAIT_HEIGHT;            HEIGHT=$A4_PORTRAIT_WIDTH;        else             /usr/bin/zenity --error --text="$(echo $(eval_gettext 'Strange orientation $ORIENTATION selected.') $(eval_gettext 'If you see this message, please contact the developer on https://github.com/nobodyinperson/thunar-custom-actions.'))";            exit 1;        fi;         (echo '#'$(eval_gettext 'Converting to PDF')...;            fileinput="$(echo                 %F)";filefinalout="$(echo                 $(dirname %f)/$(basename %f | /usr/bin/perl -pe 's#\.\w+$##g')_$ORIENTATION.pdf)";if test "$fileinput" = "$filefinalout";then  fileout=$(f=$(echo "$filefinalout");while test -e "$f";do f=$(dirname "$f")/.$(basename "$f").tmp;done;echo "$f");else  fileout="$filefinalout";fi;OVERWRITE=yes;if test -e "$filefinalout" -a ! "$fileinput" = "$filefinalout";then  base=$(basename "$filefinalout"); if ! (/usr/bin/zenity --question --text="$(echo $(eval_gettext 'overwrite $base?'))");then   OVERWRITE=no; fi;fi;if test "$OVERWRITE" = "yes";then  (/usr/bin/convert %F -gravity Center -background white -resize ${WIDTH}x${HEIGHT} -extent ${WIDTH}x${HEIGHT} -units PixelsPerInch -density 200x200 "$fileout");fi;if ! test "$fileout" = "$filefinalout";then  if cp "$fileout" "$filefinalout";then   rm "$fileout"; else   /usr/bin/zenity --error --text="$(echo $(eval_gettext 'something went wrong copying the file $fileout over to $filefinalout.'))"; fi;fi )|/usr/bin/zenity --progress --auto-kill --auto-close --title="$(echo             $(eval_gettext 'Converting to PDF'))" --pulsate        )</command>
    <description xml:lang="de">Die ausgewählten Bilder werden zu Seiten eines einzigen PDF-Dokument in A4-Größe konvertiert.</description>
    <description xml:lang="en">The selected images are converted to pages of a single PDF document at A4 page size.</description>
    <description>The selected images are converted to pages of a single PDF document at A4 page size.</description>
	<patterns>*</patterns>
	<image-files/>
</action>
<action>
	<icon>application-pdf</icon>
	<name xml:lang="de">zu einem PDF zusammenfügen</name>
	<name xml:lang="en">Concatenate PDFs</name>
	<name>Concatenate PDFs</name>
	<command>(set -e;export TEXTDOMAIN='thunar-custom-actions';export TEXTDOMAINDIR='/usr/share/locale';. /usr/bin/gettext.sh;        (echo '#'$(eval_gettext 'Concatenating PDFs')...;            fileinput="$(echo                 %F)";filefinalout="$(echo                 %f-all.pdf)";if test "$fileinput" = "$filefinalout";then  fileout=$(f=$(echo "$filefinalout");while test -e "$f";do f=$(dirname "$f")/.$(basename "$f").tmp;done;echo "$f");else  fileout="$filefinalout";fi;OVERWRITE=yes;if test -e "$filefinalout" -a ! "$fileinput" = "$filefinalout";then  base=$(basename "$filefinalout"); if ! (/usr/bin/zenity --question --text="$(echo $(eval_gettext 'overwrite $base?'))");then   OVERWRITE=no; fi;fi;if test "$OVERWRITE" = "yes";then  (/usr/bin/gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="$fileout" %F);fi;if ! test "$fileout" = "$filefinalout";then  if cp "$fileout" "$filefinalout";then   rm "$fileout"; else   /usr/bin/zenity --error --text="$(echo $(eval_gettext 'something went wrong copying the file $fileout over to $filefinalout.'))"; fi;fi )|/usr/bin/zenity --progress --auto-kill --auto-close --title="$(echo             $(eval_gettext 'Concatenating PDFs'))" --pulsate        )</command>
    <description xml:lang="de">Die ausgewählten PDF-Dateien werden zu einem einzigen PDF-Dokument zusammengefügt</description>
    <description xml:lang="en">The selected PDF files are concatenated into one PDF file.</description>
    <description>The selected PDF files are concatenated into one PDF file.</description>
	<patterns>*.PDF;*.pdf</patterns>
	<other-files/>
</action>
<action>
	<icon>window-restore-symbolic</icon>
	<name xml:lang="de">PDF-Dateigröße verringern</name>
	<name xml:lang="en">Reduce PDF file size</name>
	<name>Reduce PDF file size</name>
	<command>(set -e;export TEXTDOMAIN='thunar-custom-actions';export TEXTDOMAINDIR='/usr/share/locale';. /usr/bin/gettext.sh;    (AMOUNT=$(for file in %F;do echo "$file";done | wc -l);NR=0;for file in %F;do  NR="$(echo "$NR+1" | /usr/bin/bc)"; PERCENTAGE="$(echo "$NR*100/$AMOUNT" | /usr/bin/bc)"; filebase=$(basename "$file"); echo '#'$(eval_gettext 'Optimizing PDF') ... "$filebase";  (fileinput="$(echo                 "$file")";filefinalout="$(echo                 "$file")";if test "$fileinput" = "$filefinalout";then  fileout=$(f=$(echo "$filefinalout");while test -e "$f";do f=$(dirname "$f")/.$(basename "$f").tmp;done;echo "$f");else  fileout="$filefinalout";fi;OVERWRITE=yes;if test -e "$filefinalout" -a ! "$fileinput" = "$filefinalout";then  base=$(basename "$filefinalout"); if ! (/usr/bin/zenity --question --text="$(echo $(eval_gettext 'overwrite $base?'))");then   OVERWRITE=no; fi;fi;if test "$OVERWRITE" = "yes";then  (/usr/bin/gs -dBATCH -dNOPAUSE -q -dPDFSETTINGS=/prepress                 -sDEVICE=pdfwrite -dDownsampleColorImages=true                 -dDownsampleGrayImages=true -dDownsampleMonoImages=true                 -dColorImageResolution=72 -dGrayImageResolution=72                 -dMonoImageResolution=72 -sOutputFile="$fileout" "$fileinput");fi;if ! test "$fileout" = "$filefinalout";then  if cp "$fileout" "$filefinalout";then   rm "$fileout"; else   /usr/bin/zenity --error --text="$(echo $(eval_gettext 'something went wrong copying the file $fileout over to $filefinalout.'))"; fi;fi );  echo $PERCENTAGE;done        )|/usr/bin/zenity --progress --auto-kill --auto-close    )</command>
    <description xml:lang="de">[Vorsicht: Qualitätsverlust] Es wird versucht, bei den ausgewählten PDF-Dokumenten die Dateigröße zu verringern.</description>
    <description xml:lang="en">[Caution: loss of quality!] An attempt to reduce the file size of each selected PDF file is made.</description>
    <description>[Caution: loss of quality!] An attempt to reduce the file size of each selected PDF file is made.</description>
	<patterns>*.PDF;*.pdf</patterns>
	<other-files/>
</action>
<action>
	<icon>gcr-gnupg</icon>
	<name xml:lang="de">Symmetrisch verschlüsseln mit GPG</name>
	<name xml:lang="en">Encrypt symmetrically with GPG</name>
	<name>Encrypt symmetrically with GPG</name>
	<command>(set -e;export TEXTDOMAIN='thunar-custom-actions';export TEXTDOMAINDIR='/usr/share/locale';. /usr/bin/gettext.sh;    if ! /usr/bin/gpg-agent;then     (echo '#'$(eval_gettext 'Initialising gnupg...');        /usr/bin/gpg2 --list-public-keys;        /usr/bin/gpg-connect-agent /bye;        /usr/bin/gpg-agent --pinentry-program="/usr/bin/pinentry-gtk-2"         pulse)|/usr/bin/zenity --progress --auto-kill --auto-close;fi;    PASSWORD=$(/usr/bin/zenity --password) || exit;    (AMOUNT=$(for file in %F;do echo "$file";done | wc -l);NR=0;for file in %F;do  NR="$(echo "$NR+1" | /usr/bin/bc)"; PERCENTAGE="$(echo "$NR*100/$AMOUNT" | /usr/bin/bc)"; filebase=$(basename "$file"); echo '#'$(eval_gettext 'Encrypting') ... "$filebase";  (fileinput="$(echo                 "$file")";filefinalout="$(echo                 "$file".asc)";if test "$fileinput" = "$filefinalout";then  fileout=$(f=$(echo "$filefinalout");while test -e "$f";do f=$(dirname "$f")/.$(basename "$f").tmp;done;echo "$f");else  fileout="$filefinalout";fi;OVERWRITE=yes;if test -e "$filefinalout" -a ! "$fileinput" = "$filefinalout";then  base=$(basename "$filefinalout"); if ! (/usr/bin/zenity --question --text="$(echo $(eval_gettext 'overwrite $base?'))");then   OVERWRITE=no; fi;fi;if test "$OVERWRITE" = "yes";then  (echo $PASSWORD | /usr/bin/gpg2 --batch --yes --passphrase-fd 0 --symmetric --armor -o "$fileout" "$fileinput");fi;if ! test "$fileout" = "$filefinalout";then  if cp "$fileout" "$filefinalout";then   rm "$fileout"; else   /usr/bin/zenity --error --text="$(echo $(eval_gettext 'something went wrong copying the file $fileout over to $filefinalout.'))"; fi;fi );  echo $PERCENTAGE;done        )|/usr/bin/zenity --progress --auto-kill --auto-close    )</command>
    <description xml:lang="de">Die ausgewählten Dateien werden symmetrisch mit einem Password mit GPG verschlüsselt.</description>
    <description xml:lang="en">Each selected file is encrypted symmetrically with one given password with GPG.</description>
    <description>Each selected file is encrypted symmetrically with one given password with GPG.</description>
	<patterns>*</patterns>
	<audio-files/>
	<image-files/>
	<other-files/>
	<text-files/>
	<video-files/>
</action>
<action>
	<icon>gcr-gnupg</icon>
	<name xml:lang="de">Asymmetrisch verschlüsseln mit GPG</name>
	<name xml:lang="en">Encrypt asymmetrically with GPG</name>
	<name>Encrypt asymmetrically with GPG</name>
	<command>(set -e;export TEXTDOMAIN='thunar-custom-actions';export TEXTDOMAINDIR='/usr/share/locale';. /usr/bin/gettext.sh;    if ! /usr/bin/gpg-agent;then     (echo '#'$(eval_gettext 'Initialising gnupg...');        /usr/bin/gpg2 --list-public-keys;        /usr/bin/gpg-connect-agent /bye;        /usr/bin/gpg-agent --pinentry-program="/usr/bin/pinentry-gtk-2"         pulse)|/usr/bin/zenity --progress --auto-kill --auto-close;fi;    if test -z "$(/usr/bin/gpg2 --list-public-keys | /usr/bin/parse-gpg2-k)";then         /usr/bin/zenity --error --text="$(echo $(eval_gettext 'Your local keyring does not contain any public keys.'))";        exit;    fi;    RECIPIENT_KEY="$(/usr/bin/gpg2 --list-public-keys | /usr/bin/parse-gpg2-k |        /usr/bin/zenity --list --print-column=1         --column="$(eval_gettext 'Public Key')"         --column="$(eval_gettext 'Name')"         --column="$(eval_gettext 'Email')"        --text="$(eval_gettext 'Select a recipient key from the list below.')"        --title="$(eval_gettext 'Recipient key')"        )";    /usr/bin/gpg-connect-agent /bye;    /usr/bin/gpg-agent --pinentry-program="/usr/bin/pinentry-gtk-2";    (AMOUNT=$(for file in %F;do echo "$file";done | wc -l);NR=0;for file in %F;do  NR="$(echo "$NR+1" | /usr/bin/bc)"; PERCENTAGE="$(echo "$NR*100/$AMOUNT" | /usr/bin/bc)"; filebase=$(basename "$file"); echo '#'$(eval_gettext 'Encrypting') ... "$filebase";  (fileinput="$(echo                 "$file")";filefinalout="$(echo                 "$file".gpg)";if test "$fileinput" = "$filefinalout";then  fileout=$(f=$(echo "$filefinalout");while test -e "$f";do f=$(dirname "$f")/.$(basename "$f").tmp;done;echo "$f");else  fileout="$filefinalout";fi;OVERWRITE=yes;if test -e "$filefinalout" -a ! "$fileinput" = "$filefinalout";then  base=$(basename "$filefinalout"); if ! (/usr/bin/zenity --question --text="$(echo $(eval_gettext 'overwrite $base?'))");then   OVERWRITE=no; fi;fi;if test "$OVERWRITE" = "yes";then  (/usr/bin/gpg2 --batch --yes --recipient "$RECIPIENT_KEY"                     --encrypt --armor --trust-model always                     --output "$fileout" "$fileinput");fi;if ! test "$fileout" = "$filefinalout";then  if cp "$fileout" "$filefinalout";then   rm "$fileout"; else   /usr/bin/zenity --error --text="$(echo $(eval_gettext 'something went wrong copying the file $fileout over to $filefinalout.'))"; fi;fi );  echo $PERCENTAGE;done        )|/usr/bin/zenity --progress --auto-kill --auto-close    )</command>
    <description xml:lang="de">Die ausgewählten Dateien werden asymmetrisch mit GPG verschlüsselt.</description>
    <description xml:lang="en">Each selected file is encrypted asymmetrically with GPG.</description>
    <description>Each selected file is encrypted asymmetrically with GPG.</description>
	<patterns>*</patterns>
	<audio-files/>
	<image-files/>
	<other-files/>
	<text-files/>
	<video-files/>
</action>
<action>
	<icon>gcr-gnupg</icon>
	<name xml:lang="de">Entschlüsseln mit GPG</name>
	<name xml:lang="en">Decrypt with GPG</name>
	<name>Decrypt with GPG</name>
	<command>(set -e;export TEXTDOMAIN='thunar-custom-actions';export TEXTDOMAINDIR='/usr/share/locale';. /usr/bin/gettext.sh;    if ! /usr/bin/gpg-agent;then     (echo '#'$(eval_gettext 'Initialising gnupg...');        /usr/bin/gpg2 --list-public-keys;        /usr/bin/gpg-connect-agent /bye;        /usr/bin/gpg-agent --pinentry-program="/usr/bin/pinentry-gtk-2"         pulse)|/usr/bin/zenity --progress --auto-kill --auto-close;fi;    (AMOUNT=$(for file in %F;do echo "$file";done | wc -l);NR=0;for file in %F;do  NR="$(echo "$NR+1" | /usr/bin/bc)"; PERCENTAGE="$(echo "$NR*100/$AMOUNT" | /usr/bin/bc)"; filebase=$(basename "$file"); echo '#'$(eval_gettext 'Decrypting') ... "$filebase";  (fileinput="$(echo                 "$file")";filefinalout="$(echo                 $(dirname "$file")/$(basename "$file" | /usr/bin/perl -pe 's#\.\w+$##g'))";if test "$fileinput" = "$filefinalout";then  fileout=$(f=$(echo "$filefinalout");while test -e "$f";do f=$(dirname "$f")/.$(basename "$f").tmp;done;echo "$f");else  fileout="$filefinalout";fi;OVERWRITE=yes;if test -e "$filefinalout" -a ! "$fileinput" = "$filefinalout";then  base=$(basename "$filefinalout"); if ! (/usr/bin/zenity --question --text="$(echo $(eval_gettext 'overwrite $base?'))");then   OVERWRITE=no; fi;fi;if test "$OVERWRITE" = "yes";then  (/usr/bin/gpg2 --batch --yes --decrypt -o "$fileout" "$fileinput" ||                 /usr/bin/zenity --error --text="$(echo $(eval_gettext 'Could not decrypt $filebase.') $(eval_gettext 'Wrong password or no appropriate private key available?'))";                );fi;if ! test "$fileout" = "$filefinalout";then  if cp "$fileout" "$filefinalout";then   rm "$fileout"; else   /usr/bin/zenity --error --text="$(echo $(eval_gettext 'something went wrong copying the file $fileout over to $filefinalout.'))"; fi;fi );  echo $PERCENTAGE;done        )|/usr/bin/zenity --progress --auto-kill --auto-close    )</command>
    <description xml:lang="de">Die ausgewählten Dateien werden mit GPG entschlüsselt.</description>
    <description xml:lang="en">Each selected file is decrypted with GPG.</description>
    <description>Each selected file is decrypted with GPG.</description>
	<patterns>*.asc;*.pgp;*.gpg</patterns>
	<other-files/>
</action>
<action>
	<icon>edit-redo</icon>
	<name xml:lang="de">im Uhrzeigersinn drehen</name>
	<name xml:lang="en">Turn clockwise</name>
	<name>Turn clockwise</name>
	<command>(set -e;export TEXTDOMAIN='thunar-custom-actions';export TEXTDOMAINDIR='/usr/share/locale';. /usr/bin/gettext.sh;    (AMOUNT=$(for file in %F;do echo "$file";done | wc -l);NR=0;for file in %F;do  NR="$(echo "$NR+1" | /usr/bin/bc)"; PERCENTAGE="$(echo "$NR*100/$AMOUNT" | /usr/bin/bc)"; filebase=$(basename "$file"); echo '#'$(eval_gettext 'Rotating clockwise') ... "$filebase";  (fileinput="$(echo                 "$file")";filefinalout="$(echo                 "$file")";if test "$fileinput" = "$filefinalout";then  fileout=$(f=$(echo "$filefinalout");while test -e "$f";do f=$(dirname "$f")/.$(basename "$f").tmp;done;echo "$f");else  fileout="$filefinalout";fi;OVERWRITE=yes;if test -e "$filefinalout" -a ! "$fileinput" = "$filefinalout";then  base=$(basename "$filefinalout"); if ! (/usr/bin/zenity --question --text="$(echo $(eval_gettext 'overwrite $base?'))");then   OVERWRITE=no; fi;fi;if test "$OVERWRITE" = "yes";then  (/usr/bin/convert -rotate 90 "$fileinput" "$fileout");fi;if ! test "$fileout" = "$filefinalout";then  if cp "$fileout" "$filefinalout";then   rm "$fileout"; else   /usr/bin/zenity --error --text="$(echo $(eval_gettext 'something went wrong copying the file $fileout over to $filefinalout.'))"; fi;fi );  echo $PERCENTAGE;done        )|/usr/bin/zenity --progress --auto-kill --auto-close    )</command>
	<description xml:lang="en">The selected images are turned clockwise.</description>
	<description xml:lang="de">Die ausgewählten Bilder werden im Uhrzeigersinn gedreht.</description>
	<description>The selected images are turned clockwise.</description>
	<patterns>*</patterns>
	<image-files/>
</action>
<action>
	<icon>edit-undo</icon>
	<name xml:lang="de">Gegen den Uhrzeigersinn drehen</name>
	<name xml:lang="en">Turn anti-clockwise</name>
	<name>Turn anti-clockwise</name>
	<command>(set -e;export TEXTDOMAIN='thunar-custom-actions';export TEXTDOMAINDIR='/usr/share/locale';. /usr/bin/gettext.sh;    (AMOUNT=$(for file in %F;do echo "$file";done | wc -l);NR=0;for file in %F;do  NR="$(echo "$NR+1" | /usr/bin/bc)"; PERCENTAGE="$(echo "$NR*100/$AMOUNT" | /usr/bin/bc)"; filebase=$(basename "$file"); echo '#'$(eval_gettext 'Rotating anti-clockwise') ... "$filebase";  (fileinput="$(echo                 "$file")";filefinalout="$(echo                 "$file")";if test "$fileinput" = "$filefinalout";then  fileout=$(f=$(echo "$filefinalout");while test -e "$f";do f=$(dirname "$f")/.$(basename "$f").tmp;done;echo "$f");else  fileout="$filefinalout";fi;OVERWRITE=yes;if test -e "$filefinalout" -a ! "$fileinput" = "$filefinalout";then  base=$(basename "$filefinalout"); if ! (/usr/bin/zenity --question --text="$(echo $(eval_gettext 'overwrite $base?'))");then   OVERWRITE=no; fi;fi;if test "$OVERWRITE" = "yes";then  (/usr/bin/convert -rotate 270 "$fileinput" "$fileout");fi;if ! test "$fileout" = "$filefinalout";then  if cp "$fileout" "$filefinalout";then   rm "$fileout"; else   /usr/bin/zenity --error --text="$(echo $(eval_gettext 'something went wrong copying the file $fileout over to $filefinalout.'))"; fi;fi );  echo $PERCENTAGE;done        )|/usr/bin/zenity --progress --auto-kill --auto-close    )</command>
    <description xml:lang="en">The selected images are turned anti-clockwise.</description>
	<description xml:lang="de">Die ausgewählten Bilder werden gegen den Uhrzeigersinn gedreht.</description>
    <description>The selected images are turned anti-clockwise.</description>
	<patterns>*</patterns>
	<image-files/>
</action>
<action>
	<icon>insert-image</icon>
	<name xml:lang="de">In anderes Format umwandeln</name>
	<name xml:lang="en">Convert to other format</name>
	<name>Convert to other format</name>
	<command>(set -e;export TEXTDOMAIN='thunar-custom-actions';export TEXTDOMAINDIR='/usr/share/locale';. /usr/bin/gettext.sh;    FORMAT=$(        /usr/bin/convert -list format |         /usr/bin/perl -ane '($f,$m,$c,$d)=m/^\s*(\S*?)\**\s*(\S*)\s*([r-][w-][+-])\s*(.*)$/g;if($c=~m/^.w.$/){print join "\n",$f,$d,""}' |         /usr/bin/zenity --list             --print-column=1             --column="$(eval_gettext 'Format')"             --column="$(eval_gettext 'Description')"             --text="$(eval_gettext 'Select format:')"             --title="$(eval_gettext 'Format')"         );    if test $? -ne 0;then         exit;    fi;    FORMAT=$(echo $FORMAT | /usr/bin/perl -ne 'print lc');    if test -z "$FORMAT";then         /usr/bin/zenity --error --text="$(echo $(eval_gettext 'No format selected.') $(eval_gettext 'If you see this message, please contact the developer on https://github.com/nobodyinperson/thunar-custom-actions.'))";        exit 1;    fi;     (AMOUNT=$(for file in %F;do echo "$file";done | wc -l);NR=0;for file in %F;do  NR="$(echo "$NR+1" | /usr/bin/bc)"; PERCENTAGE="$(echo "$NR*100/$AMOUNT" | /usr/bin/bc)"; filebase=$(basename "$file"); echo '#'$(eval_gettext 'Converting to $FORMAT') ... "$filebase";  (fileinput="$(echo                 "$file")";filefinalout="$(echo                 $(dirname "$file")/$(basename "$file" | /usr/bin/perl -pe 's#\.\w+$##g').${FORMAT})";if test "$fileinput" = "$filefinalout";then  fileout=$(f=$(echo "$filefinalout");while test -e "$f";do f=$(dirname "$f")/.$(basename "$f").tmp;done;echo "$f");else  fileout="$filefinalout";fi;OVERWRITE=yes;if test -e "$filefinalout" -a ! "$fileinput" = "$filefinalout";then  base=$(basename "$filefinalout"); if ! (/usr/bin/zenity --question --text="$(echo $(eval_gettext 'overwrite $base?'))");then   OVERWRITE=no; fi;fi;if test "$OVERWRITE" = "yes";then  (CONVERT_OUTPUT=$(/usr/bin/convert "$fileinput" "$fileout" 2&gt;&amp;1;) ||                     /usr/bin/zenity --error --text="$(echo $(eval_gettext 'Could not convert $fileinput to $FORMAT: $CONVERT_OUTPUT'))";                );fi;if ! test "$fileout" = "$filefinalout";then  if cp "$fileout" "$filefinalout";then   rm "$fileout"; else   /usr/bin/zenity --error --text="$(echo $(eval_gettext 'something went wrong copying the file $fileout over to $filefinalout.'))"; fi;fi );  echo $PERCENTAGE;done        )|/usr/bin/zenity --progress --auto-kill --auto-close    )</command>
	<description xml:lang="en">The selected images are converted to a specified format.</description>
	<description>The selected images are converted to a specified format.</description>
	<description xml:lang="de">Die ausgewählten Bilder werden in ein angegebenes Format umgewandelt.</description>
	<patterns>*</patterns>
	<image-files/>
</action>
<action>
	<icon>applications-graphics-symbolic</icon>
	<name xml:lang="de">in Graustufen umwandeln</name>
	<name xml:lang="en">Convert to grayscale</name>
	<name>Convert to grayscale</name>
	<command>(set -e;export TEXTDOMAIN='thunar-custom-actions';export TEXTDOMAINDIR='/usr/share/locale';. /usr/bin/gettext.sh;    (AMOUNT=$(for file in %F;do echo "$file";done | wc -l);NR=0;for file in %F;do  NR="$(echo "$NR+1" | /usr/bin/bc)"; PERCENTAGE="$(echo "$NR*100/$AMOUNT" | /usr/bin/bc)"; filebase=$(basename "$file"); echo '#'$(eval_gettext 'Converting to grayscale') ... "$filebase";  (fileinput="$(echo                 "$file")";filefinalout="$(echo                 "$file")";if test "$fileinput" = "$filefinalout";then  fileout=$(f=$(echo "$filefinalout");while test -e "$f";do f=$(dirname "$f")/.$(basename "$f").tmp;done;echo "$f");else  fileout="$filefinalout";fi;OVERWRITE=yes;if test -e "$filefinalout" -a ! "$fileinput" = "$filefinalout";then  base=$(basename "$filefinalout"); if ! (/usr/bin/zenity --question --text="$(echo $(eval_gettext 'overwrite $base?'))");then   OVERWRITE=no; fi;fi;if test "$OVERWRITE" = "yes";then  (/usr/bin/convert "$fileinput" -set colorspace Gray -separate -average "$fileout");fi;if ! test "$fileout" = "$filefinalout";then  if cp "$fileout" "$filefinalout";then   rm "$fileout"; else   /usr/bin/zenity --error --text="$(echo $(eval_gettext 'something went wrong copying the file $fileout over to $filefinalout.'))"; fi;fi );  echo $PERCENTAGE;done        )|/usr/bin/zenity --progress --auto-kill --auto-close    )</command>
	<description xml:lang="de">arithmetische Mittelung aller Farbkanäle</description>
	<description xml:lang="en">The selected images are converted to grayscale by averaging the RGB-channels.</description>
	<description>The selected images are converted to grayscale by averaging the RGB-channels.</description>
	<patterns>*</patterns>
	<startup-notify/>
	<image-files/>
</action>
<action>
	<icon>color-fill</icon>
	<name xml:lang="de">Transparenz füllen</name>
	<name xml:lang="en">Fill transparency</name>
	<name>Fill transparency</name>
	<command>(set -e;export TEXTDOMAIN='thunar-custom-actions';export TEXTDOMAINDIR='/usr/share/locale';. /usr/bin/gettext.sh;    COLOR=$(/usr/bin/zenity --color-selection) || exit;    (AMOUNT=$(for file in %F;do echo "$file";done | wc -l);NR=0;for file in %F;do  NR="$(echo "$NR+1" | /usr/bin/bc)"; PERCENTAGE="$(echo "$NR*100/$AMOUNT" | /usr/bin/bc)"; filebase=$(basename "$file"); echo '#'$(eval_gettext 'Filling transparency with $COLOR') ... "$filebase";  (fileinput="$(echo                 "$file")";filefinalout="$(echo                 "$file")";if test "$fileinput" = "$filefinalout";then  fileout=$(f=$(echo "$filefinalout");while test -e "$f";do f=$(dirname "$f")/.$(basename "$f").tmp;done;echo "$f");else  fileout="$filefinalout";fi;OVERWRITE=yes;if test -e "$filefinalout" -a ! "$fileinput" = "$filefinalout";then  base=$(basename "$filefinalout"); if ! (/usr/bin/zenity --question --text="$(echo $(eval_gettext 'overwrite $base?'))");then   OVERWRITE=no; fi;fi;if test "$OVERWRITE" = "yes";then  (/usr/bin/convert "$fileinput" -background "$COLOR" -alpha remove "$fileout");fi;if ! test "$fileout" = "$filefinalout";then  if cp "$fileout" "$filefinalout";then   rm "$fileout"; else   /usr/bin/zenity --error --text="$(echo $(eval_gettext 'something went wrong copying the file $fileout over to $filefinalout.'))"; fi;fi );  echo $PERCENTAGE;done        )|/usr/bin/zenity --progress --auto-kill --auto-close    )</command>
	<description xml:lang="de">Bei den ausgewählten Bildern werden transparente Bereiche mit der ausgewählten Farbe gefüllt.</description>
	<description xml:lang="en">The alpha channel in the selected images is filled with the selected color.</description>
	<description>The alpha channel in the selected images is filled with the selected color.</description>
	<patterns>*</patterns>
	<image-files/>
</action>
<action>
	<icon>window-restore-symbolic</icon>
	<name xml:lang="de">Bilder verkleinern</name>
	<name xml:lang="en">Shrink images</name>
	<name>Shrink images</name>
	<command>(set -e;export TEXTDOMAIN='thunar-custom-actions';export TEXTDOMAINDIR='/usr/share/locale';. /usr/bin/gettext.sh;    SCALE=$(/usr/bin/zenity --text="$(eval_gettext 'Scale to what percentage?')" --scale --value=50 --min-value=1 --max-value=99) || exit;    (AMOUNT=$(for file in %F;do echo "$file";done | wc -l);NR=0;for file in %F;do  NR="$(echo "$NR+1" | /usr/bin/bc)"; PERCENTAGE="$(echo "$NR*100/$AMOUNT" | /usr/bin/bc)"; filebase=$(basename "$file"); echo '#'$(eval_gettext 'Scale to $SCALE percent') ... "$filebase";  (fileinput="$(echo                 "$file")";filefinalout="$(echo                 "$file")";if test "$fileinput" = "$filefinalout";then  fileout=$(f=$(echo "$filefinalout");while test -e "$f";do f=$(dirname "$f")/.$(basename "$f").tmp;done;echo "$f");else  fileout="$filefinalout";fi;OVERWRITE=yes;if test -e "$filefinalout" -a ! "$fileinput" = "$filefinalout";then  base=$(basename "$filefinalout"); if ! (/usr/bin/zenity --question --text="$(echo $(eval_gettext 'overwrite $base?'))");then   OVERWRITE=no; fi;fi;if test "$OVERWRITE" = "yes";then  (/usr/bin/convert "$fileinput" -resize ${SCALE}%% "$fileout");fi;if ! test "$fileout" = "$filefinalout";then  if cp "$fileout" "$filefinalout";then   rm "$fileout"; else   /usr/bin/zenity --error --text="$(echo $(eval_gettext 'something went wrong copying the file $fileout over to $filefinalout.'))"; fi;fi );  echo $PERCENTAGE;done        )|/usr/bin/zenity --progress --auto-kill --auto-close    )</command>
	<description xml:lang="de">Die ausgewählten Bilder werden auf einen gewählten Prozentsatz der ursprünglichen Größe skaliert.</description>
	<description xml:lang="en">The selected images are scaled to a given percentage of the original size.</description>
	<description>The selected images are scaled to a given percentage of the original size.</description>
	<patterns>*</patterns>
	<image-files/>
</action>
<action>
	<icon>emblem-symbolic-link</icon>
	<name xml:lang="de">Verknüpfung erstellen</name>
	<name xml:lang="en">Create link targeted here</name>
	<name>Create link targeted here</name>
	<command>(set -e;export TEXTDOMAIN='thunar-custom-actions';export TEXTDOMAINDIR='/usr/share/locale';. /usr/bin/gettext.sh;        TARGET="$(/usr/bin/zenity --file-selection --title="$(eval_gettext 'Select link location')" --save --filename %f)" || exit;        if test "$TARGET" = %f;then         /usr/bin/zenity --error --text="$(echo $(eval_gettext 'The link name has to differ from the target name.'))";exit;        fi;        fileinput="$(echo             %f)";filefinalout="$(echo             $TARGET)";fileout="$filefinalout";OVERWRITE=yes;if test -e "$filefinalout" -a ! "$fileinput" = "$filefinalout";then  base=$(basename "$filefinalout"); if ! (/usr/bin/zenity --question --text="$(echo $(eval_gettext 'overwrite $base?'))");then   OVERWRITE=no; fi;fi;if test "$OVERWRITE" = "yes";then  (ln -sf "$fileinput" "$fileout" || /usr/bin/zenity --error --text="$(echo $(eval_gettext 'Could not create link'))");fi;         )</command>
	<description xml:lang="de">Eine symbolische Verknüpfung hierher erstellen.</description>
	<description xml:lang="en">Create a symbolic link targeted here.</description>
	<description>Create a symbolic link targeted here.</description>
	<patterns>*</patterns>
	<audio-files/>
	<image-files/>
	<other-files/>
	<text-files/>
	<video-files/>
	<directories/>
</action>
<action>
	<icon>edit-find</icon>
	<name xml:lang="de">Platzfresser finden</name>
	<name xml:lang="en">Find space-consuming elements</name>
	<name>Find space-consuming elements</name>
	<command>(set -e;export TEXTDOMAIN='thunar-custom-actions';export TEXTDOMAINDIR='/usr/share/locale';. /usr/bin/gettext.sh;    TMPFILE=$(mktemp);    (echo '#'$(eval_gettext 'Determining file sizes')...;        du -ha --max-depth 1 %f |             sort -rh |             perl -ne '($s,$n)=m/^(\S+)\s+(\S+.*)$/;$n=~s:.*/([^/]+)$:${1}:g;print "$s\n$n\n"' |             tee $TMPFILE)|/usr/bin/zenity --progress --auto-kill --auto-close --title="$(echo         $(eval_gettext 'Determining file sizes'))" --pulsate;    cd %f;    cat $TMPFILE |         /usr/bin/zenity --list --column="$(eval_gettext 'Size')"             --column="$(eval_gettext 'Name')"             --title="$(eval_gettext 'Big elements')"             --text="$(eval_gettext 'Elements sorted by size')\n$(eval_gettext 'Double-click to open.')"             --print-column 2 |         /usr/bin/xargs -r --delimiter='\n' /usr/bin/xdg-open;    rm "$TMPFILE")</command>
	<description xml:lang="de">Die größten Dateien und Ordner hier sortiert auflisten.</description>
	<description xml:lang="en">Give a sorted list of the biggest files and folders here.</description>
	<description>Give a sorted list of the biggest files and folders here.</description>
	<patterns>*</patterns>
	<directories/>
</action>
<action>
	<icon>checkbox-checked-symbolic</icon>
	<name xml:lang="de">Prüfsummen</name>
	<name xml:lang="en">Checksums</name>
	<name>Checksums</name>
	<command>(set -e;export TEXTDOMAIN='thunar-custom-actions';export TEXTDOMAINDIR='/usr/share/locale';. /usr/bin/gettext.sh;    TMPFILE=$(mktemp);    (AMOUNT=$(for file in %F;do echo "$file";done | wc -l);NR=0;for file in %F;do  NR="$(echo "$NR+1" | /usr/bin/bc)"; PERCENTAGE="$(echo "$NR*100/$AMOUNT" | /usr/bin/bc)"; filebase=$(basename "$file"); echo '#'$(eval_gettext 'Determining checksums') ... "$filebase";  (basename "$file" &gt;&gt; $TMPFILE;            /usr/bin/md5sum    "$file" | cut -d' ' -f1 &gt;&gt; $TMPFILE;            /usr/bin/sha1sum   "$file" | cut -d' ' -f1 &gt;&gt; $TMPFILE;            /usr/bin/sha256sum "$file" | cut -d' ' -f1 &gt;&gt; $TMPFILE;            );  echo $PERCENTAGE;done)|/usr/bin/zenity --progress --auto-kill --auto-close --title="$(echo         $(eval_gettext 'Determining checksums'))";    cat $TMPFILE |         /usr/bin/zenity --list             --column="$(eval_gettext 'Name')"             --column="$(eval_gettext 'MD5')"             --column="$(eval_gettext 'SHA1')"             --column="$(eval_gettext 'SHA256')"             --title="$(eval_gettext 'Checksums')"             --text="$(eval_gettext 'Checksums')\n$(eval_gettext 'Double-click to open.')"             --print-column 1 |         /usr/bin/xargs -r --delimiter='\n' /usr/bin/xdg-open;    rm "$TMPFILE")</command>
	<description xml:lang="de">Verschiedene Prüfsummen der ausgewählten Dateien anzeigen.</description>
	<description xml:lang="en">Show different checksums of the selected files.</description>
	<description>Show different checksums of the selected files.</description>
	<patterns>*</patterns>
	<audio-files/>
	<image-files/>
	<other-files/>
	<text-files/>
	<video-files/>
</action>
</actions>
